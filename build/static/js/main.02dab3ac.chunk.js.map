{"version":3,"sources":["components/Input.js","components/Filter.js","services/persons.js","components/SuccessMessage.js","components/ErrorMessage.js","App.js","index.js"],"names":["Input","name","handleChange","onChange","Filter","baseUrl","axios","get","then","response","data","personObject","post","personId","delete","put","SuccessMessage","message","className","ErrorMessage","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","filtered","setFiltered","successMessage","setSuccessMessage","errorMessage","setErrorMessage","useEffect","personServices","initialData","event","target","value","type","onClick","preventDefault","currentName","newNameObj","number","result","filter","person","length","console","log","personName","personToUpdate","id","updatedPerson","window","confirm","map","catch","error","setTimeout","updatePersonNumber","updatedPersons","concat","success","toLowerCase","includes","personToDelete","deletePerson","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.02dab3ac.chunk.js","sourcesContent":["import React from 'react'\n\n\nconst Input = ({name, handleChange}) => (\n    <div>\n        {name} <input onChange={handleChange} />\n    </div>\n)\n\nexport default Input","import React from 'react'\n\nconst Filter = ({ handleChange }) => (\n    <div>\n        <input onChange={handleChange} />\n    </div>\n)\n\nexport default Filter","import axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst addNewPerson = personObject => {\n    const request = axios.post(baseUrl, personObject)\n    return request.then(response => response.data)\n    \n}\n\nconst deletePerson = personId => {\n    return axios.delete(`${baseUrl}/${personId}`)\n}\n\nconst updatePerson = (personId, personObject) => {\n    return axios.put(`${baseUrl}/${personId}`, personObject )\n}\n\nexport default {getAll, addNewPerson, deletePerson, updatePerson}","import React from 'react'\n\nconst SuccessMessage = ({message}) => {\n    if (message === null){\n        return null\n    }\n    return (\n        <div className=\"success\">\n            {message}\n        </div>\n    )\n}\n\nexport default SuccessMessage","import React from 'react'\n\nconst ErrorMessage = ({message}) => {\n    if (message===null){\n        return null\n    }\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default ErrorMessage","import React, { useState, useEffect } from 'react'\nimport Input from './components/Input'\nimport Filter from './components/Filter'\nimport personServices from './services/persons'\nimport SuccessMessage from './components/SuccessMessage'\nimport ErrorMessage from './components/ErrorMessage'\nimport { getNodeText } from '@testing-library/dom'\n\nconst App = () => {\n  const [ currentId, setId] = useState(1)\n  const [ persons, setPersons ] = useState([]) //list of persons state\n  const [ newName, setNewName ] = useState('') //new person state\n  const [ newNumber, setNewNumber ] = useState('') //new number state\n  const [ filtered, setFiltered ] = useState('') //new filter state\n  const [ filteredPersons, setFilteredPersons ] = useState(persons) //filtered persons state\n  const [successMessage, setSuccessMessage ] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  const useHook = () => {\n    personServices.getAll()\n      .then(initialData => setPersons(initialData))\n  }\n\n  useEffect(useHook, [])\n\n\n  //deletes a number\n  const deletePerson = (id) => {\n    //get specific person\n    const personToDelete = persons.filter(person => person.id === id)\n    //get specific person's name attribute\n    const personName = personToDelete[0].name\n    const result = window.confirm(`Would you like to delete ${personName}'s number?`)\n    if (result){\n      personServices.deletePerson(personToDelete[0].id)\n        .then(setPersons(persons.filter(person => person.id !== id)))\n    }\n  }\n\n  //checks list of persons state if the new entry is a cuplicate\n  const checkDuplicate = (currentName) => (\n    persons.filter(person => person.name === currentName)\n    )\n  \n  //event handler for typing in a new name\n  const changeNewName = (event) => {\n    setNewName(event.target.value)\n  }\n\n\n  //event handler for typing in a new number\n  const changeNewNumber = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  //event handler for typing in filter\n  const changeFilter = (event) => {\n    setFiltered(event.target.value)\n  }\n\n  //update data\n  const updatePersonNumber = (personName) => {\n    const personToUpdate = persons.filter(person => person.name === personName)[0]\n    const personId = personToUpdate.id\n    const updatedPerson = {...personToUpdate, number: newNumber}\n    const result = window.confirm(\n            `${personName} already has an existing phone number. Would you like to update it? `\n            )\n\n    if (result) {\n      personServices.updatePerson(personId, updatedPerson)\n        .then(setPersons(persons.map( person => person.id !== personId ? person : updatedPerson)))\n        .catch( error =>{ \n          setErrorMessage(`Information of ${personName} has already been removed from server`)\n          setTimeout(() => setErrorMessage(null), 5000)\n        })\n    }\n  }\n\n  //event handler for adding in a new name\n  const addNewName = (event) => {\n    event.preventDefault()\n    const newNameObj = {\n      name: newName,\n      number: newNumber,\n    }\n\n    const result = checkDuplicate(newName).length\n    console.log(result>0)\n    //if there is a duplicate, raises an alert\n    if (result){\n      updatePersonNumber(newName)\n    }\n    else{\n      personServices.addNewPerson(newNameObj)\n      .then(updatedPersons => setPersons(persons.concat(newNameObj)))\n      .then(success => {\n        setSuccessMessage(`${newName} has been added to the phonebook`)\n        setNewName('')\n        setTimeout( () => setSuccessMessage(null), 5000)\n      })\n      .catch( error => {\n        console.log(error.response.data)\n        setErrorMessage(error.response.data.error)\n        setTimeout( () => setErrorMessage(null), 5000)\n      })\n    }\n    \n\n  }\n\n  //changes the filteredPersons state to contain the filtered people only\n  const changeFilteredPersons = () => {\n    return persons.filter((person) => person.name.toLowerCase().includes(filtered.toLowerCase()))\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n        <SuccessMessage message={successMessage} />\n        <ErrorMessage message={errorMessage} / >\n        <Filter handleChange={changeFilter} />\n      <h3>Add a new</h3>\n      <form>\n        <Input name=\"name\" handleChange={changeNewName} />\n        <Input name=\"number\" handleChange={changeNewNumber} />\n        <div>\n          <button type=\"submit\" onClick={addNewName}>add</button>\n        </div>\n      </form>\n      <h3>Numbers</h3>\n      {changeFilteredPersons().map(\n            (person) => \n                <p key={person.id}>\n                  {person.name} {person.number} <t/>\n                  <button onClick={() => deletePerson(person.id)}>\n                    Delete\n                  </button>\n                </p> \n                )}\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}